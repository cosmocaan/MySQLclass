SQL Sandbox: (Works best with Chrome.  Some queries fail in Firefox)
https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_or

1. SELECT * FROM Customers;  <-Observe the data in the columns and rows
2. SELECT * FROM Orders;
3. SELECT * FROM products ORDER BY Price DESC; <- List products by price in descending order
4. SELECT
	   customerName,
	   COUNT(*) AS 'number of orders'
   FROM customers
   INNER JOIN orders
           ON orders.customerID = customers.customerID
   GROUP BY customers.customerID;


What is a database?
A structured set of computerized data with a DBMS interfacw

Info for installing on Mac/Linux:
Once you've downloaded and started up the MySQL server...

Add the following line to your .bash_profile or .zshrc file

export PATH=${PATH}:/usr/local/mysql/bin/ 

Then run:

Mysql -u root -p 

And enter the password you received when you initially installed.

Finally, create a new password for the root user by running:

ALTER USER 'root'@'localhost' IDENTIFIED BY 'yournewpassword' 


Note: Some students have mentioned that they get errors instead of warnings when using MySQL for Mac (and possibly Windows/Linux). If you run into this error then you can try the following solution to resolve the issue:

Take your setup out of strict mode with the following command:
SET @@global.sql_mode= ''; 


-- Creating databases and tables:
One database server can have multiple databases to separate different kinds of data

Create database
# mysql-ctl cli
mysql> show databases;    <- Show all available databases
mysql> CREATE DATABASE <name>;  <- create a new database

Drop database
mysql> drop database <name>;  <- Delete database. 
mysql> show databases;

Use databases
mysql> USE <database name>;  <- use the database named.  

To see what database you are using
mysql>SELECT database(); 

-- Tables
Databases are made up of lots of tables
Data types - data type is required to be specified in tables.  This keeps data consistent
  There are many Numeric and string types.  This course only focuses on:
    INT - Whole numbers only. Max value 4294967295
	VARCHAR - Variable length string. Between 1 and 255 characters. Specify max length with parentheses
	           ex. VARCHAR(100)   <- only stores the first 100 characters

EXERCISE table tweets:
- User name (max 15 characters)
- The tweetcontent (max 140 characters)
- Number of favorites

user_name			|content								|number_favorited
VARCHAR(15)			|VARCHAR(140)							|Type=INT
-------------------------------------------------------------------------------
'coolguy'			|'my first tweet'						|2
'guitar_queen'		|'I love music :)'						|10
'lonely_heart'		|'still looking 4 love'					|0

Creating Tables (Tip - Use plural for your table names)
mysql> CREATE DATABASE <database name>;
mysql> USE <database name>;
mysql> CREATE TABLE <tablename>
         (
		   column_name data_type,
		   column_name data_type
		  );

Check if table was created
mysql> SHOW TABLES;

Another way:
mysql> SHOW COLUMNS FROM <tablename>;

Even another way:
mysql> DESC <tablename>;

Dropping tables
mysql> DROP TABLE <tablename>;

EXERCISE Create a pastries table
- It should include 2 columns: name and quantity. Name is 50 characters max
- Inspect your table/columns in the CLI
- Delete your table

mysql> CREATE DATABASE pastriesdb
    -> ;
Query OK, 1 row affected (0.01 sec)

mysql> show databases
    -> ;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| pastriesdb         |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| pastriesdb |
+------------+
1 row in set (0.01 sec)

mysql> use pastriesdb;
Database changed
mysql> CREATE TABLE pastries
    -> (
    -> name VARCHAR(50),
    -> quantity INT
    -> );
Query OK, 0 rows affected (0.06 sec)

mysql> SHOW tables;
+----------------------+
| Tables_in_pastriesdb |
+----------------------+
| pastries             |
+----------------------+
1 row in set (0.00 sec)

mysql> DESC pastries;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| name     | varchar(50) | YES  |     | NULL    |       |
| quantity | int(11)     | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
2 rows in set (0.01 sec)

mysql> DROP TABLE pastries;
Query OK, 0 rows affected (0.06 sec)

mysql> SHOW tables;
Empty set (0.00 sec)

mysql> DROP DATABASE pastriesdb;


-- Inserting data
mysql> INSERT INTO <tablename>(column_name) VALUES(data);
   Where column_name is comma separated list of columns and data is a comma separated list of data to be placed in rows in the same order as columns.
   
To check that is worked:
mysql> SELECT * from <tablename>

Bulk insert data:
mysql> INSERT INTO <tablename>(column_name,column_name)
       VALUES ('A',1)
			   ,('B',2) 
			   ,('C',3);
			   
EXERCISE CREATE a people table and INSERT data
- first_name - 20 character limit
- last_name - 20 character limit
- age

Tina Belcher 13
Bob Belcher 42
Linda Belcher 45
Phillip Frond 38
Calvin Fischoeder 70

mysql> CREATE DATABASE exercisedb;
Query OK, 1 row affected (0.01 sec)

mysql> use exercisedb
Database changed
mysql> SHOW TABLES;
Empty set (0.00 sec)

mysql> CREATE TABLE people (first_name VARCHAR(20),last_name VARCHAR(20),age INT);
Query OK, 0 rows affected (0.06 sec)

mysql> SHOW TABLES;
+----------------------+
| Tables_in_exercisedb |
+----------------------+
| people               |
+----------------------+
1 row in set (0.00 sec)

mysql> DESC people;
+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| first_name | varchar(20) | YES  |     | NULL    |       |
| last_name  | varchar(20) | YES  |     | NULL    |       |
| age        | int(11)     | YES  |     | NULL    |       |
+------------+-------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> INSERT INTO people (first_name,last_name,age) VALUES ('\'Tina\'','\'Belcher\'',13);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO people (age,last_name,first_name) VALUES (42,'\'Belcher\'','\'Bob\'');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO people (first_name,last_name,age) VALUES ('\'Linda\'','\'Belcher\'',47),('\'Phillip\'','\'Frond\'',38),('\'Calvin\'','\'Fishchoeder\'',70);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM people;
+------------+---------------+------+
| first_name | last_name     | age  |
+------------+---------------+------+
| 'Tina'     | 'Belcher'     |   13 |
| 'Bob'      | 'Belcher'     |   42 |
| 'Linda'    | 'Belcher'     |   47 |
| 'Phillip'  | 'Frond'       |   38 |
| 'Calvin'   | 'Fishchoeder' |   70 |
+------------+---------------+------+
5 rows in set (0.00 sec)

**** Side note:
SHOW WARNINGS;  <- Will show you information about warnings.
mysql> CREATE TABLE test (name VARCHAR(10), age INT);
Query OK, 0 rows affected (0.06 sec)

mysql> INSERT INTO test (name, age) VALUES ('My Name is longer than 10 CHRs',50);
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> SHOW WARNINGS;
+---------+------+-------------------------------------------+
| Level   | Code | Message                                   |
+---------+------+-------------------------------------------+
| Warning | 1265 | Data truncated for column 'name' at row 1 |
+---------+------+-------------------------------------------+
1 row in set (0.00 sec)

mysql> SELECT * from test;
+------------+------+
| name       | age  |
+------------+------+
| My Name is |   50 |
+------------+------+
1 row in set (0.00 sec)

mysql> INSERT INTO test (name,age) VALUES (14,'Nombre');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> SHOW WARNINGS;
+---------+------+-------------------------------------------------------------+
| Level   | Code | Message                                                     |
+---------+------+-------------------------------------------------------------+
| Warning | 1366 | Incorrect integer value: 'Nombre' for column 'age' at row 1 |
+---------+------+-------------------------------------------------------------+
1 row in set (0.00 sec)

NULL and NOT NULL  
If Null set to YES, empty values will fill in with default
mysql> DESC test;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| name  | varchar(10) | YES  |     | NULL    |       |
| age   | int(11)     | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

If NOT NULL is used, empty values are given warnings, but the field is left blank
mysql> DROP TABLE test;
Query OK, 0 rows affected (0.04 sec)

mysql> CREATE TABLE test (name VARCHAR(20) NOT NULL, age INT NOT NULL);
Query OK, 0 rows affected (0.05 sec)

mysql> DESC test;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| name  | varchar(20) | NO   |     | NULL    |       |
| age   | int(11)     | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)


Setting Default values
Create a table with default values
mysql> CREATE TABLE test1 (name VARCHAR(20) DEFAULT 'no name provided',age INT DEFAULT 99);

Primary Keys
A unique identifier on each row. Useful for identical rows to give a unique identifier for each
    CREATE TABLE unique_cats
      (
        cat_id INT NOT NULL,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (cat_id)
      );

When creating a table, use AUTO INCREMENT as an option for the column that will be primary.
   Use PRIMARY KEY coumn name to specify which column will be unique
    CREATE TABLE unique_cats2 (
        cat_id INT NOT NULL AUTO_INCREMENT,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (cat_id)
    );

Exercise Create an employee table with unique id for employee
id - number(auto increment), mandatory, primary key
last_name - text, mandatory
first name - test, mandatory
middle_name - text, not mandatory
age - number mandatory
current_status text, mandatory, defaults to 'employed'

mysql> CREATE TABLE employees (
    -> id INT NOT NULL AUTO_INCREMENT,
    -> last_name VARCHAR(10) NOT NULL,
    -> first_name VARCHAR(10) NOT NULL,
    -> middle_name VARCHAR(10),
    -> age INT NOT NULL,
    -> current_status VARCHAR(10) NOT NULL DEFAULT 'employed'
	-> PRIMARY KEY (id)
    -> );	

mysql> DESC employees;
+----------------+-------------+------+-----+----------+----------------+
| Field          | Type        | Null | Key | Default  | Extra          |
+----------------+-------------+------+-----+----------+----------------+
| id             | int(11)     | NO   | PRI | NULL     | auto_increment |
| last_name      | varchar(10) | NO   |     | NULL     |                |
| first_name     | varchar(10) | NO   |     | NULL     |                |
| middle_name    | varchar(10) | YES  |     | NULL     |                |
| age            | int(11)     | NO   |     | NULL     |                |
| current_status | varchar(10) | NO   |     | employed |                |
+----------------+-------------+------+-----+----------+----------------+
6 rows in set (0.00 sec)


-- CRUD commands
Create Read Update Delete

Create - INSERT INTO.  See examples above

Recreate cats table
mysql> CREATE TABLE cats (
    -> cat_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    -> name VARCHAR(100),
    -> breed VARCHAR(100)
    -> ,age INT
    -> );
Query OK, 0 rows affected (0.07 sec)

mysql> DESC cats
    -> ;
+--------+--------------+------+-----+---------+----------------+
| Field  | Type         | Null | Key | Default | Extra          |
+--------+--------------+------+-----+---------+----------------+
| cat_id | int(11)      | NO   | PRI | NULL    | auto_increment |
| name   | varchar(100) | YES  |     | NULL    |                |
| breed  | varchar(100) | YES  |     | NULL    |                |
| age    | int(11)      | YES  |     | NULL    |                |
+--------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)
  
mysql> INSERT INTO cats(name, breed, age) 
       VALUES ('Ringo', 'Tabby', 4),
              ('Cindy', 'Maine Coon', 10),
              ('Dumbledore', 'Maine Coon', 11),
              ('Egg', 'Persian', 4),
              ('Misty', 'Tabby', 13),
              ('George Michael', 'Ragdoll', 9),
              ('Jackson', 'Sphynx', 7);

Read - SELECT
SELECT * FROM cats <- Gove me all of the columns from cats

SELECT Expression - What columns do you want?
mysql> SELECT name FROM cats
mysql> SELECT name,age FROM cats <- order of selection is order of output

Introduction to WHERE
mysql> SELECT * FROM cats WHERE age=4  <- Show all cats that are 4 years old
mysql> SELECT * FROM cats WHERE name='Egg' <- Quotes needed since VARCHAR is not an integer

Exercise - Get only cat_id from cats.  Get name and breed only. Select only Tabby cats name and age. 
           Select instances where cat_id and age are the same.

mysql> SELECT cat_id FROM cats;
+--------+
| cat_id |
+--------+
|      1 |
|      2 |
|      3 |
|      4 |
|      5 |
|      6 |
|      7 |
+--------+
7 rows in set (0.00 sec)

mysql> SELECT name,breed FROM cats;
+----------------+------------+
| name           | breed      |
+----------------+------------+
| Ringo          | Tabby      |
| Cindy          | Maine Coon |
| Dumbledore     | Maine Coon |
| Egg            | Persian    |
| Misty          | Tabby      |
| George Michael | Ragdoll    |
| Jackson        | Sphynx     |
+----------------+------------+
7 rows in set (0.00 sec)

mysql> SELECT name, age FROM cats WHERE breed='Tabby';
+-------+------+
| name  | age  |
+-------+------+
| Ringo |    4 |
| Misty |   13 |
+-------+------+
2 rows in set (0.00 sec)

mysql> SELECT name, age FROM cats WHERE breed='Tabby';
+-------+------+
| name  | age  |
+-------+------+
| Ringo |    4 |
| Misty |   13 |
+-------+------+
2 rows in set (0.00 sec)

Introduction to Aliases
Can change the output for columns to have a more meaningful name.
SELECT cat_id as id, name FROM cats;  <- Alias 'cat+id to id
SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;


UPDATE
UPDATE, SET, and WHERE are the key words
UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';
UPDATE cats SET age=14 WHERE name='Misty';

Good rule of thumb - Make sure you are targeting correct data.  Use SELECT to verify before using UPDATE

Exercises - Change Jackson's name to Jack. Change Ringo's breed to 'British shorthair'. Update both Maine Coons to be 12 

mysql> SELECT * FROM cats WHERE cat_id=age;
+--------+---------+---------+------+years old
| cat_id | name    | breed   | age  |
+--------+---------+---------+------+
|      4 | Egg     | Persian |    4 |
|      7 | Jackson | Sphynx  |    7 |
+--------+---------+---------+------+
2 rows in set (0.00 sec)

mysql> SELECT * FROM cats WHERE name='Jackson'
    -> ;
+--------+---------+--------+------+
| cat_id | name    | breed  | age  |
+--------+---------+--------+------+
|      7 | Jackson | Sphynx |    7 |
+--------+---------+--------+------+
1 row in set (0.00 sec)

mysql> UPDATE cats SET name='JACK' WHERE name='Jackson';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM cats WHERE name='Jackson';
Empty set (0.00 sec)

mysql> SELECT * FROM cats WHERE name='Jack';
+--------+------+--------+------+
| cat_id | name | breed  | age  |
+--------+------+--------+------+
|      7 | JACK | Sphynx |    7 |
+--------+------+--------+------+
1 row in set (0.00 sec)

mysql> UPDATE cats SET breed='British Shorthair' WHERE name='Ringo';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM cats WHERE name='Ringo'
    -> ;
+--------+-------+-------------------+------+
| cat_id | name  | breed             | age  |
+--------+-------+-------------------+------+
|      1 | Ringo | British Shorthair |    4 |
+--------+-------+-------------------+------+
1 row in set (0.00 sec)

mysql> SELECT * FROM cats WHERE breed='Maine Coon';
+--------+------------+------------+------+
| cat_id | name       | breed      | age  |
+--------+------------+------------+------+
|      2 | Cindy      | Maine Coon |   10 |
|      3 | Dumbledore | Maine Coon |   11 |
+--------+------------+------------+------+
2 rows in set (0.00 sec)

mysql> UPDATE cats SET age=12 WHERE breed='Maine Coon';
Query OK, 2 rows affected (0.01 sec)
Rows matched: 2  Changed: 2  Warnings: 0

mysql> SELECT * FROM cats WHERE breed='Maine Coon';
+--------+------------+------------+------+
| cat_id | name       | breed      | age  |
+--------+------------+------------+------+
|      2 | Cindy      | Maine Coon |   12 |
|      3 | Dumbledore | Maine Coon |   12 |
+--------+------------+------------+------+
2 rows in set (0.00 sec)

DELETE
DELETE FROM cats WHERE name='Egg';  <- Delete the row with cat named Egg.
Be sure to SELECT before running DELETE.

CAREFUL ---  DELETE FROM cats;  will delete all entries in cats table.

Exercise - Delete all cats 4 years old.  Delete cats whose age is the same as cat_id. Delete all cats.

mysql> SELECT * FROM cats WHERE age=4;
+--------+-------+-------------------+------+
| cat_id | name  | breed             | age  |
+--------+-------+-------------------+------+
|      1 | Ringo | British Shorthair |    4 |
|      4 | Egg   | Persian           |    4 |
+--------+-------+-------------------+------+
2 rows in set (0.01 sec)

mysql> DELETE FROM cats WHERE age=4;
Query OK, 2 rows affected (0.05 sec)

mysql> SELECT * FROM cats WHERE age=4;
Empty set (0.00 sec)

mysql> SELECT * FROM cats WHERE cat_id=age;
+--------+------+--------+------+
| cat_id | name | breed  | age  |
+--------+------+--------+------+
|      7 | Jack | Sphynx |    7 |
+--------+------+--------+------+
1 row in set (0.00 sec)

mysql> DELETE FROM cats WHERE cat_id=age;
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM cats WHERE cat_id=age;
Empty set (0.00 sec)

mysql> SELECT * FROM cats WHERE cat_id=age;
+--------+------+--------+------+
| cat_id | name | breed  | age  |
+--------+------+--------+------+
|      7 | Jack | Sphynx |    7 |
+--------+------+--------+------+
1 row in set (0.00 sec)

mysql> DELETE FROM cats WHERE cat_id=age;
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM cats WHERE cat_id=age;
Empty set (0.00 sec)

**** BIG Exercise Section.  All the stuff I have learned so far. ****

Annual Closet Inventory

>>> Create a new shirts_db database <<<
mysql> CREATE database shirts_db;
Query OK, 1 row affected (0.00 sec)

>>> Create a new table shirts <<<
mysql> CREATE table shirts (shirt_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, article VARCHAR(20), color VARCHAR(20), shirt_size VARCHAR(4), last_worn INT);
Query OK, 0 rows affected (0.06 sec)

>>> Add all data at once <<<
mysql> INSERT INTO shirts (article, color, shirt_size, last_worn) VALUES ('t-shirt
', 'white', 'S', 10), ('t-shirt', 'green', 'S', 200), ('polo shirt', 'black', 'M',
 10), ('tank top', 'blue', 'S', 50), ('t-shirt', 'pink', 'S', 0), ('polo shirt', '
red', 'M', 5), ('tank top', 'white', 'S', 200), ('tank top', 'blue', 'M', 15);
Query OK, 8 rows affected (0.54 sec)
Records: 8  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM shirts
    -> ;
+----------+------------+-------+------------+-----------+
| shirt_id | article    | color | shirt_size | last_worn |
+----------+------------+-------+------------+-----------+
|        1 | t-shirt    | white | S          |        10 |
|        2 | t-shirt    | green | S          |       200 |
|        3 | polo shirt | black | M          |        10 |
|        4 | tank top   | blue  | S          |        50 |
|        5 | t-shirt    | pink  | S          |         0 |
|        6 | polo shirt | red   | M          |         5 |
|        7 | tank top   | white | S          |       200 |
|        8 | tank top   | blue  | M          |        15 |
+----------+------------+-------+------------+-----------+
8 rows in set (0.00 sec)

>>> Add new Purple polo shirt size M last worn 50 days ago. <<<
mysql> INSERT INTO shirts (color, article, shirt_size, last_worn) VALUES ('purple'
, 'polo shirt', 'M', 50);
Query OK, 1 row affected (0.50 sec)

mysql> SELECT * FROM shirts;
+----------+------------+--------+------------+-----------+
| shirt_id | article    | color  | shirt_size | last_worn |
+----------+------------+--------+------------+-----------+
|        1 | t-shirt    | white  | S          |        10 |
|        2 | t-shirt    | green  | S          |       200 |
|        3 | polo shirt | black  | M          |        10 |
|        4 | tank top   | blue   | S          |        50 |
|        5 | t-shirt    | pink   | S          |         0 |
|        6 | polo shirt | red    | M          |         5 |
|        7 | tank top   | white  | S          |       200 |
|        8 | tank top   | blue   | M          |        15 |
|        9 | polo shirt | purple | M          |        50 |
+----------+------------+--------+------------+-----------+
9 rows in set (0.00 sec)

>>> Select all medium shirts with all data but the shirt_id <<<
mysql> SELECT article, color, shirt_size, last_worn FROM shirts WHERE shirt_size='
M';
+------------+--------+------------+-----------+
| article    | color  | shirt_size | last_worn |
+------------+--------+------------+-----------+
| polo shirt | black  | M          |        10 |
| polo shirt | red    | M          |         5 |
| tank top   | blue   | M          |        15 |
| polo shirt | purple | M          |        50 |
+------------+--------+------------+-----------+
4 rows in set (0.00 sec)

>>> Update all polo shirts to size L <<<
mysql> SELECT * FROM shirts WHERE article='polo shirt';
+----------+------------+--------+------------+-----------+
| shirt_id | article    | color  | shirt_size | last_worn |
+----------+------------+--------+------------+-----------+
|        3 | polo shirt | black  | M          |        10 |
|        6 | polo shirt | red    | M          |         5 |
|        9 | polo shirt | purple | M          |        50 |
+----------+------------+--------+------------+-----------+
3 rows in set (0.00 sec)

mysql> UPDATE shirts SET shirt_size='L' WHERE article='polo shirt';
Query OK, 3 rows affected (0.71 sec)
Rows matched: 3  Changed: 3  Warnings: 0

mysql> SELECT * FROM shirts WHERE article='polo shirt';
+----------+------------+--------+------------+-----------+
| shirt_id | article    | color  | shirt_size | last_worn |
+----------+------------+--------+------------+-----------+
|        3 | polo shirt | black  | L          |        10 |
|        6 | polo shirt | red    | L          |         5 |
|        9 | polo shirt | purple | L          |        50 |
+----------+------------+--------+------------+-----------+
3 rows in set (0.00 sec)

>>> Update shirt last worn 15 days ago to 0 days <<<
mysql> SELECT * FROM shirts WHERE last_worn=15;
+----------+----------+-------+------------+-----------+
| shirt_id | article  | color | shirt_size | last_worn |
+----------+----------+-------+------------+-----------+
|        8 | tank top | blue  | M          |        15 |
+----------+----------+-------+------------+-----------+
1 row in set (0.00 sec)

mysql> UPDATE shirts SET last_worn=0 WHERE last_worn=15;
Query OK, 1 row affected (0.08 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM shirts WHERE last_worn=15;
Empty set (0.00 sec)

>>> Update all white shirts - new size XS and color to off white <<<
mysql> SELECT * FROM shirts WHERE color='white'
    -> ;
+----------+----------+-------+------------+-----------+
| shirt_id | article  | color | shirt_size | last_worn |
+----------+----------+-------+------------+-----------+
|        1 | t-shirt  | white | S          |        10 |
|        7 | tank top | white | S          |       200 |
+----------+----------+-------+------------+-----------+
2 rows in set (0.00 sec)

mysql> UPDATE shirts SET color='off white', shirt_size='XS' WHERE color='white';
Query OK, 2 rows affected (1.50 sec)
Rows matched: 2  Changed: 2  Warnings: 0

mysql> SELECT * FROM shirts WHERE color='white';
+----------+----------+-------+------------+-----------+
| shirt_id | article  | color | shirt_size | last_worn |
+----------+----------+-------+------------+-----------+
|        1 | t-shirt  | white | XS         |        10 |
|        7 | tank top | white | XS         |       200 |
+----------+----------+-------+------------+-----------+
2 rows in set (0.00 sec)

>>> Delete all old shirts last worn 200 days ago <<<
mysql> SELECT * FROM shirts WHERE last_worn >= 200
    -> ;
+----------+----------+-------+------------+-----------+
| shirt_id | article  | color | shirt_size | last_worn |
+----------+----------+-------+------------+-----------+
|        2 | t-shirt  | green | S          |       200 |
|        7 | tank top | white | XS         |       200 |
+----------+----------+-------+------------+-----------+
2 rows in set (0.00 sec)

mysql> DELETE FROM shirts WHERE last_worn >= 200;
Query OK, 2 rows affected (0.01 sec)

mysql> SELECT * FROM shirts WHERE last_worn >= 200;
Empty set (0.00 sec)

>>> Delete all tank tops <<<
mysql> SELECT * FROM shirts
    -> ;
+----------+------------+--------+------------+-----------+
| shirt_id | article    | color  | shirt_size | last_worn |
+----------+------------+--------+------------+-----------+
|        1 | t-shirt    | white  | XS         |        10 |
|        3 | polo shirt | black  | L          |        10 |
|        4 | tank top   | blue   | S          |        50 |
|        5 | t-shirt    | pink   | S          |         0 |
|        6 | polo shirt | red    | L          |         5 |
|        8 | tank top   | blue   | M          |         0 |
|        9 | polo shirt | purple | L          |        50 |
+----------+------------+--------+------------+-----------+
7 rows in set (0.00 sec)

mysql> DELETE FROM shirts WHERE article='tank top';
Query OK, 2 rows affected (0.01 sec)

mysql> SELECT * FROM shirts WHERE article='tank top';
Empty set (0.00 sec)

>>> Delete all shirts <<<
mysql> DELETE FROM shirts;
Query OK, 5 rows affected (0.20 sec)

mysql> SELECT * FROM shirts;
Empty set (0.00 sec)

>>> Drop the shirts table <<<
mysql> SHOW tables;
+---------------------+
| Tables_in_shirts_db |
+---------------------+
| shirts              |
+---------------------+
1 row in set (0.00 sec)

mysql> DROP table shirts;
Query OK, 0 rows affected (0.58 sec)


Sourcing files
From the mysql> prompt, you can source a file to execute it.  When you start mysql, the directory you started from is the PWD

-- Working with Strings
Helpful tip - From now on, begin writing and running from SQL files.
Running SQL Files
Name files with .sql extension
mysql> source filename.sql

Loading our Book Data

Create file bookdata.sql with these contents:
DROP DATABASE IF EXISTS book_shop;
CREATE DATABASE book_shop;
USE book_shop; 

CREATE TABLE books 
	(
		book_id INT NOT NULL AUTO_INCREMENT,
		title VARCHAR(100),
		author_fname VARCHAR(100),
		author_lname VARCHAR(100),
		released_year INT,
		stock_quantity INT,
		pages INT,
		PRIMARY KEY(book_id)
	);

INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);

Then source the sql file:
mysql> source bookdata.sql
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 1 row affected (0.00 sec)

Database changed
Query OK, 0 rows affected (0.06 sec)

Query OK, 16 rows affected (0.02 sec)
Records: 16  Duplicates: 0  Warnings: 0

mysql> SELECT database() ;
+------------+
| database() |
+------------+
| book_shop  |
+------------+
1 row in set (0.00 sec)

mysql> DESC books;
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| book_id        | int(11)      | NO   | PRI | NULL    | auto_increment |
| title          | varchar(100) | YES  |     | NULL    |                |
| author_fname   | varchar(100) | YES  |     | NULL    |                |
| author_lname   | varchar(100) | YES  |     | NULL    |                |
| released_year  | int(11)      | YES  |     | NULL    |                |
| stock_quantity | int(11)      | YES  |     | NULL    |                |
| pages          | int(11)      | YES  |     | NULL    |                |
+----------------+--------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)


Google MySQL String Functions for documentation on a list of String Functions

Working with CONCAT
mysql> SELECT CONCAT(column,' ',anothercolumn) FROM table; <- space ot text between the quotes

mysql> SELECT
    -> CONCAT(author_fname,' ',author_lname)
	-> AS 'Full Name'
    -> FROM books;
+---------------------------------------+
| Full Name								|
+---------------------------------------+
| Jhumpa Lahiri                         |
| Neil Gaiman                           |
| Neil Gaiman                           |
| Jhumpa Lahiri                         |
| Dave Eggers                           |
| Dave Eggers                           |
| Michael Chabon                        |
| Patti Smith                           |
| Dave Eggers                           |
| Neil Gaiman                           |
| Raymond Carver                        |
| Raymond Carver                        |
| Don DeLillo                           |
| John Steinbeck                        |
| David Foster Wallace                  |
| David Foster Wallace                  |
+---------------------------------------+
16 rows in set (0.00 sec)

CONCAT_WS - Concatenate With Separator
SELECT CONCAT_WS('-', title, author_fname, author_lname) FROM books;

Working with SUBSTRINGS - only certain parts of a string
SELECT SUBSTRING('Hello World', 1, 4);  <- Pulls Characters 1 to 4 ('Hell')
SELECT SUBSTRING('Hello World', 7);  <- Pulls from character 7 to the end ('World')
SELECT SUBSTRING('Hello World', -3); <- Pulls from the end of the string ('rld')

mysql> SELECT SUBSTRING(title, 1, 10) AS 'Short Title' from books;
+-------------+
| Short Title |
+-------------+
| The Namesa  |
| Norse Myth  |
| American G  |
| Interprete  |
| A Hologram  |
| The Circle  |
| The Amazin  |
| Just Kids   |
| A Heartbre  |
| Coraline    |
| What We Ta  |
| Where I'm   |
| White Nois  |
| Cannery Ro  |
| Oblivion:   |
| Consider t  |
+-------------+
16 rows in set (0.00 sec  

SUBSTRING and CONCAT together.  SUBSTRING is evaluated first then CONCAT
SELECT
    CONCAT
	(
	    SUBSTRING(title,1, 10),
	)  AS 'short title'
FROM books;



Working with REPLACE - Replace parts of strings
SELECT REPLACE('Hello World', 'Hell', '%$#@' );  
%$#@o World

SELECT
    SUBSTRING(REPLACE(title, 'e', '3'), 1, 10)
FROM books;

Working with REVERSE - Simply reverses the string
SELECT REVERSE('Hello World');
dlroW olleH

WOrking with CHAR_LENGTH - Simply lists how many characters ling the string is
SELECT CHAR_LENGTH('Hello World');
11

sql-formatter.com - YOu can paste your queries in and it will format them nicely.

Changing case with UPPER and LOWER - Changes the case of a string
SELECT UPPER('Hello World');
HELLO World
SELECT LOWER('Hello World');
hello world

Exercise String functions
Reverse and upper case this string:
"Why does my cat look at me with such hatred?"
SELECT UPPER(REVERSE('Why does my cat look at me with such hatred?'));

What does this print out? Concats I Like cats and then replaces the spaces with dashes
SELECT
  REPLACE
  (
  CONCAT('I', ' ', 'like', ' ', 'cats'),
  ' ',
  '-'
  );

Replace spaces in titles with '->'
SELECT REPLACE(title, ' ', '->') AS title FROM books;

Print a table of author last names forwards and backwards
SELECT (author_lname) AS forwards, REVERSE(author_lname) AS backwards FROM books;

Upper case author first and last name together in single column with title 'full name in caps'
SELECT 
    CONCAT
	(
		  UPPER(author_fname),' ', UPPER(author_lname)
	) AS 'full name in caps' 
	FROM books;
	
List titles with "was released in" and the year it was released
SELECT 
    CONCAT
	(
		  UPPER(author_fname),' ', UPPER(author_lname)
	) AS 'full name in caps' 
	FROM books;
	
Print book titles and the length of each title
SELECT title AS title, CHAR_LENGTH(title) AS 'character count'
FROM books;

Get short title (10 chars) author last, first name, and quantity "in stock"
SELECT 
	CONCAT(SUBSTRING(title, 1, 10), '...') AS 'short title', 
	CONCAT(author_lname,",",author_fname) AS 'author', 
	CONCAT(stock_quantity, ' in stock') AS 'quantity' 
FROM books;

-- Refining Our Selections

Seed Data - Adding a Couple of New Books
mysql> INSERT INTO books
    -> (title, author_fname, author_lname, released_year, stock_quantity, pages)
    -> VALUES ('10% Happier', 'Dan', 'Harros', 2014, 29, 256)
    -> ,('fake_book', 'Freida', 'Harris', 2001, 287, 428),
    -> ('Lincoln In The Bardo', 'George', 'Saunders', 2017, 1000, 367);
	
Using DISTINCT - Used in conjunction with Select
Only gives Unique values

SELECT DISTINCT author_lname FROM books;

A couple of ways to get DISTINCT first and last name
SELECT DISTINCT CONCAT(author_fname,' ',author_lname) FROM books;

SELECT DISTINCT author_fname, author_lname FROM books;


Sorting data with ORDER BY
Sort our results
SELECT author_lname FROM books ORDER BY author_lname;    <-- Notice the space in ORDER BY. Defaults to Ascending Order (could use ASC explicitly)

For Descending order, add DESC
SELECT author_lname FROM books ORDER BY author_lname DESC;

SELECT title, author_fname, author_lname ORDER BY 2 FROM books;  <-- Would sort by author_fname.  Columns are ordered by 1,2,3

SELECT author_fname, author_lname ORDER BY author_lname, author_fname FROM books; <-- Would sort by last name, first name


Using LIMIT - Allows us to specify a number for how many results we want
SELECT title FROM books LIMIT 3; <-- gives you the first 3 titles in the table

SELECT title, released_year FROM books ORDER BY released_year LIMIT 5;  <-- Get 5 most recently released books

SELECT title, released_year FROM books ORDER BY released_year LIMIT 0, 5; <-- Specify a starting point and how many beyond that (start first row and only go 5 rows

SELECT * FROM table LIMIT 95, 1844474667736773; <-- From MySQL doc, to select from starting point to the end, enter starting point and a gigantic number beyond the last row.

Better searches with LIKE - 
SELECT * FROM books WHERE author_fname LIKE '%da%'; <- Find any record where author first name contains da.  % is wildcard.

SELECT * FROM books WHERE author_fmane LIKE 'da%'; <-- Find any record where author first name STARTS with da.

WHERE stock_quantity LIKE '____';  <-- Four underscores.  Underscore is exactly one character. This will pull quantities that are 4 digits long.


Exercises Refining Selections
Get titles that contain 'stories'
SELECT title FROM books WHERE title LIKE '%stories%';

Print out the Title and Page count of the longest book
SELECT title, pages FROM books ORDER BY pages DESC LIMIT 1;


Summary containing "title - year" (use the dash) of the 3 most recent books
SELECT CONCAT(title, ' - ', released_year) FROM books ORDER BY released_year DESC LIMIT 3;

All books whose author last name contains a space
SELECT title, author_lname FROM books WHERE author_lname LIKE '% %';

Find 3 books with lowest stock_quantity. Print title, release year and stock_quantity
SELECT title, released_year, stock_quantity FROM books ORDER BY stock_quantity LIMIT 3;

Print title and author_lname sorted first by author_lname and then by title
SELECT title, author_lname FROM books ORDER BY author_lname, title;

ALL CAPS, print "MY FAVORITE AUTHOR IS UPPER(author_fname,' ', author_lname) AS yell for all authors sorted by last name
 ELECT UPPER(CONCAT('MY FAVORITE AUTHOR IS ', author_fname, ' ', author_lname, ' !')) FROM books ORDER BY author_lname;
 
-- The Magic of Aggregate Functions

The COUNT function
mysql> SELECT COUNT(author_fname) FROM books;
+---------------------+
| COUNT(author_fname) |
+---------------------+
|                  19 |
+---------------------+
1 row in set (0.01 sec)

mysql> SELECT COUNT(DISTINCT author_fname) FROM books;
+------------------------------+
| COUNT(DISTINCT author_fname) |
+------------------------------+
|                           12 |
+------------------------------+
1 row in set (0.00 sec)

Using GROUP BY - aggregated or summarizes identical data into single rows
    SELECT title, author_lname FROM books;
     
    SELECT title, author_lname FROM books
    GROUP BY author_lname;
     
    SELECT author_lname, COUNT(*) 
    FROM books GROUP BY author_lname;
     
     
    SELECT title, author_fname, author_lname FROM books;
     
    SELECT title, author_fname, author_lname FROM books GROUP BY author_lname;
     
    SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname;
     
    SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname;
     
    SELECT released_year FROM books;
     
    SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
     
    SELECT CONCAT('In ', released_year, ' ', COUNT(*), ' book(s) released') AS year FROM books GROUP BY released_year;


Using MIN and MAX
SELECT MIN(released_year) FROM books;  <-- Get lowest released_year
SELECT MAX(pages) FROM books; <-- Get most pages

mysql> SELECT title, MAX(pages) FROM books; <-- Listed the first title in books and the pages from the longest book which is inaccurate because the title and pages are independent
+--------------+------------+
| title        | MAX(pages) |
+--------------+------------+
| The Namesake |        634 |
+--------------+------------+
Sub-query will get you around it.  The MAX query runs first, then the SELECT * pulls from the MAX query data.:
mysql> SELECT title, pages FROM books WHERE pages = (SELECT MAX(pages) FROM books);

Another way to do it if you are only looking for the MAX or MIN:
mysql> SELECT title, pages FROM books ORDER BY pages DESC LIMIT 1;
+-------------------------------------------+-------+
| title                                     | pages |
+-------------------------------------------+-------+
| The Amazing Adventures of Kavalier & Clay |   634 |
+-------------------------------------------+-------+

Using MIN and MAX with GROUP BY
    SELECT author_fname, 
           author_lname, 
           Min(released_year) 
    FROM   books 
    GROUP  BY author_lname, 
              author_fname;
     
    SELECT
      author_fname,
      author_lname,
      Max(pages)
    FROM books
    GROUP BY author_lname,
             author_fname;
     
    SELECT
      CONCAT(author_fname, ' ', author_lname) AS author,
      MAX(pages) AS 'longest book'
    FROM books
    GROUP BY author_lname,
             author_fname;
		
The SUM function
    SELECT SUM(pages)
    FROM books;
     
    SELECT SUM(released_year) FROM books;
     
    SELECT author_fname,
           author_lname,
           Sum(pages)
    FROM books
    GROUP BY
        author_lname,
        author_fname;
     
    SELECT author_fname,
           author_lname,
           Sum(released_year)
    FROM books
    GROUP BY
        author_lname,
        author_fname;

The AVG function
    SELECT AVG(released_year) 
    FROM books;
     
    SELECT AVG(pages) 
    FROM books;
     
    SELECT AVG(stock_quantity) 
    FROM books 
    GROUP BY released_year;
     
    SELECT released_year, AVG(stock_quantity) 
    FROM books 
    GROUP BY released_year;
     
    SELECT author_fname, author_lname, AVG(pages) FROM books
    GROUP BY author_lname, author_fname;
	
Exercises Aggregate functions:
Print the number of books in the database
mysql> SELECT CONCAT("Individual book count ", COUNT(title)) FROM books;
+------------------------------------------------+
| CONCAT("Individual book count ", COUNT(title)) |
+------------------------------------------------+
| Individual book count 19                       |
+------------------------------------------------+

ALT - SELECT count(*) FROM books;

Print out how many books were released in each year
mysql> SELECT released_year, COUNT(*) AS count FROM books GROUP BY released_year;
+---------------+-------+
| released_year | count |
+---------------+-------+
|          1945 |     1 |
|          1981 |     1 |
|          1985 |     1 |
|          1989 |     1 |
|          1996 |     1 |
|          2000 |     1 |
|          2001 |     3 |
|          2003 |     2 |
|          2004 |     1 |
|          2005 |     1 |
|          2010 |     1 |
|          2012 |     1 |
|          2013 |     1 |
|          2014 |     1 |
|          2016 |     1 |
|          2017 |     1 |
+---------------+-------+

Print out the total number of books in stock
mysql> SELECT SUM(stock_quantity) FROM books;
+---------------------+
| SUM(stock_quantity) |
+---------------------+
|                2450 |
+---------------------+

Find the average released_year for each author
mysql> SELECT author_fname, author_lname, AVG(released_year) FROM books GROUP BY author_lname, author_fname;
+--------------+----------------+--------------------+
| author_fname | author_lname   | AVG(released_year) |
+--------------+----------------+--------------------+
| Raymond      | Carver         |          1985.0000 |
| Michael      | Chabon         |          2000.0000 |
| Don          | DeLillo        |          1985.0000 |
| Dave         | Eggers         |          2008.6667 |
| David        | Foster Wallace |          2004.5000 |
| Neil         | Gaiman         |          2006.6667 |
| Dan          | Harris         |          2014.0000 |
| Freida       | Harris         |          2001.0000 |
| Jhumpa       | Lahiri         |          1999.5000 |
| George       | Saunders       |          2017.0000 |
| Patti        | Smith          |          2010.0000 |
| John         | Steinbeck      |          1945.0000 |
+--------------+----------------+--------------------+

Find the full name of the author who wrote the longest book
mysql> SELECT CONCAT(author_fname,' ', author_lname), pages FROM books WHERE pages = (SELECT MAX(pages) FROM books);
+----------------------------------------+-------+
| CONCAT(author_fname,' ', author_lname) | pages |
+----------------------------------------+-------+
| Michael Chabon                         |   634 |
+----------------------------------------+-------+

Year, # books released in that year , and avg pages for that year for all books sorted by year
mysql> SELECT released_year AS year, COUNT(title) AS "# books", AVG(pages) AS "avg pages" FROM books GROUP BY released_year;
+------+---------+------------+
| year | # books | AVG(pages) |
+------+---------+------------+
| 1945 |       1 |   181.0000 |
| 1981 |       1 |   176.0000 |
| 1985 |       1 |   320.0000 |
| 1989 |       1 |   526.0000 |
| 1996 |       1 |   198.0000 |
| 2000 |       1 |   634.0000 |
| 2001 |       3 |   443.3333 |
| 2003 |       2 |   249.5000 |
| 2004 |       1 |   329.0000 |
| 2005 |       1 |   343.0000 |
| 2010 |       1 |   304.0000 |
| 2012 |       1 |   352.0000 |
| 2013 |       1 |   504.0000 |
| 2014 |       1 |   256.0000 |
| 2016 |       1 |   304.0000 |
| 2017 |       1 |   367.0000 |
+------+---------+------------+


-- Revisiting Data Types
Storing Text
VARCHAR - Random length
CHAR - Has a fixed length. Max length is 255 characters. Faster for fixed length text - State: TX, NY  Sex, M/F, Yes/No flags - Y/N
  Ex. CHAR(3)  <-- Only 3 charaters allowed. 
    CREATE TABLE dogs (name CHAR(5), breed VARCHAR(10));
     
    INSERT INTO dogs (name, breed) VALUES ('bob', 'beagle');
     
    INSERT INTO dogs (name, breed) VALUES ('robby', 'corgi');
     
    INSERT INTO dogs (name, breed) VALUES ('Princess Jane', 'Retriever');
     
    SELECT * FROM dogs;
     
    INSERT INTO dogs (name, breed) VALUES ('Princess Jane', 'Retrievesadfdsafdasfsafr');
     
    SELECT * FROM dogs;  

Numbers
INT - Whole numbers
DECIMAL(max digits, places) Max digits up to 65.  No more than 30 digits after the decimal
  Ex. DECIMAL(5,2)  <- 5 digits in the entire string, 2 digits after the decimal
    CREATE TABLE items(price DECIMAL(5,2));
     
    INSERT INTO items(price) VALUES(7);
     
    INSERT INTO items(price) VALUES(7987654);
     
    INSERT INTO items(price) VALUES(34.88);
     
    INSERT INTO items(price) VALUES(298.9999);
     
    INSERT INTO items(price) VALUES(1.9999);
     
    SELECT * FROM items;
	
See docs on these about floating point math issues:
FLOAT - Precision issues ~7 digits
DOUBLE - Precision issues ~15 digits
    CREATE TABLE thingies (price FLOAT);
     
    INSERT INTO thingies(price) VALUES (88.45);
     
    SELECT * FROM thingies;
     
    INSERT INTO thingies(price) VALUES (8877.45);
     
    SELECT * FROM thingies;
     
    INSERT INTO thingies(price) VALUES (8877665544.45);
     
    SELECT * FROM thingies;
	
DATE/TIME datatypes
DATE - Values with a Date but no Time YYYY-MM-DD
TIME - Values with a Time but no Date HH:MM:SS
DATETIME - Values with Date and Time  YYY-MM-DD HH:MM:SS

New table - demo the 3 data types
    CREATE TABLE people (name VARCHAR(100), birthdate DATE, birthtime TIME, birthdt DATETIME);
     
    INSERT INTO people (name, birthdate, birthtime, birthdt)
    VALUES('Padma', '1983-11-11', '10:07:35', '1983-11-11 10:07:35');
     
    INSERT INTO people (name, birthdate, birthtime, birthdt)
    VALUES('Larry', '1943-12-25', '04:10:42', '1943-12-25 04:10:42');
     
    SELECT * FROM people;
	
CURDATE, CURTIME, and NOW
SELECT CURDATE();
SELECT CURTIME();
SELECT NOW();

INSERT INTO people (name, birthdate, birthtime, birthdt)
    VALUES('Larry', CURDATE(), CURTIME(), NOW());
	
Formatting Dates SEE DOCUMENTATION.  
	    SELECT name, birthdate FROM people;
     
    SELECT name, DAY(birthdate) FROM people;
     
    SELECT name, birthdate, DAY(birthdate) FROM people;
     
    SELECT name, birthdate, DAYNAME(birthdate) FROM people;
     
    SELECT name, birthdate, DAYOFWEEK(birthdate) FROM people;
     
    SELECT name, birthdate, DAYOFYEAR(birthdate) FROM people;
     
    SELECT name, birthtime, DAYOFYEAR(birthtime) FROM people;
     
    SELECT name, birthdt, DAYOFYEAR(birthdt) FROM people;
     
    SELECT name, birthdt, MONTH(birthdt) FROM people;
     
    SELECT name, birthdt, MONTHNAME(birthdt) FROM people;
     
    SELECT name, birthtime, HOUR(birthtime) FROM people;
     
    SELECT name, birthtime, MINUTE(birthtime) FROM people;
     
    SELECT CONCAT(MONTHNAME(birthdate), ' ', DAY(birthdate), ' ', YEAR(birthdate)) FROM people;
     
    SELECT DATE_FORMAT(birthdt, 'Was born on a %W') FROM people;
     
    SELECT DATE_FORMAT(birthdt, '%m/%d/%Y') FROM people;
     
    SELECT DATE_FORMAT(birthdt, '%m/%d/%Y at %h:%i') FROM people;


DATE MATH
    SELECT * FROM people;
     
    SELECT DATEDIFF(NOW(), birthdate) FROM people;
     
    SELECT name, birthdate, DATEDIFF(NOW(), birthdate) FROM people;
     
    SELECT birthdt FROM people;
     
    SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;
     
    SELECT birthdt, DATE_ADD(birthdt, INTERVAL 10 SECOND) FROM people;
     
    SELECT birthdt, DATE_ADD(birthdt, INTERVAL 3 QUARTER) FROM people;
     
    SELECT birthdt, birthdt + INTERVAL 1 MONTH FROM people;
     
    SELECT birthdt, birthdt - INTERVAL 5 MONTH FROM people;
     
    SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;
	
TIMESTAMPS
    CREATE TABLE comments (
        content VARCHAR(100),
        created_at TIMESTAMP DEFAULT NOW()
    );
     
    INSERT INTO comments (content) VALUES('lol what a funny article');
     
    INSERT INTO comments (content) VALUES('I found this offensive');
     
    INSERT INTO comments (content) VALUES('Ifasfsadfsadfsad');
     
    SELECT * FROM comments ORDER BY created_at DESC;
     
    CREATE TABLE comments2 (
        content VARCHAR(100),
        changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
    );
     
    INSERT INTO comments2 (content) VALUES('dasdasdasd');
     
    INSERT INTO comments2 (content) VALUES('lololololo');
     
    INSERT INTO comments2 (content) VALUES('I LIKE CATS AND DOGS');
     
    UPDATE comments2 SET content='THIS IS NOT GIBBERISH' WHERE content='dasdasdasd';
     
    SELECT * FROM comments2;
     
    SELECT * FROM comments2 ORDER BY changed_at;
     
    CREATE TABLE comments2 (
        content VARCHAR(100),
        changed_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW()
    );
	
Exercises Datatypes
What's a good use case for CHAR instead of VARCHAR?
CHAR is good for data that needs to be limited by character count

Fill in the blanks with the best datatype and parameters (price always < $100000):
CREATE TABLE inventory (
    item_name __________,  VARCHAR(20)   
	price __________,      decimal(8,2)
	quantity _____________  INT
);

What's the difference between DATETIME and TIMESTAMP?
TIMESTAMP is limited to 2038  DATETIME goes through 9999

Print out the current time
mysql> SELECT CURTIME();
+-----------+
| CURTIME() |
+-----------+
| 20:57:11  |
+-----------+

Print out the current date but not time.
mysql> SELECT CURDATE();
+------------+
| CURDATE()  |
+------------+
| 2019-12-11 |
+------------+

Print out the current day of the week (the number)
mysql> SELECT DAYOFWEEK(CURDATE());
+-------------------------+
| DAYOFWEEK('2019-12-10') |
+-------------------------+
|                       3 |
+-------------------------+
OR SELECT DAYOFWEEK(NOW());

Print out the current day ofthe weeks (the name)
mysql> SELECT DAYNAME(NOW());
+-----------------------+
| DAYNAME('2019-12-10') |
+-----------------------+
| Tuesday               |
+-----------------------+

Print out the current day and time with format mm/dd/yyyy
mysql> SELECT DATE_FORMAT(NOW(), '%m/%d/%Y');
+---------------------------------------+
| DATE_FORMAT('2019-12-10', '%m/%d/%Y') |
+---------------------------------------+
| 12/10/2019                            |
+---------------------------------------+

Print out the current day and time using this format:
January 2nd at 3:15
April 1st at 10:18
mysql> SELECT DATE_FORMAT( NOW(), '%M %D at %h:%i');
+------------------------------------+
| DATE_FORMAT( NOW(), '%M %D %h:%i') |
+------------------------------------+
| December 12th 07:09                |
+------------------------------------+

Create a tweets table that stores
- The tweet content
- A user name
- The time the tweet was created

mysql> CREATE table tweets
 ( user_name VARCHAR(10), 
 tweet VARCHAR(80), 
 post_time DATETIME );                       <-- Could have used TIMESTAMP
mysql> INSERT INTO tweets (user_name, tweet)
   VALUES ('cosmo', 'my new tweet'), 
          ('mike', 'Mike\'s new tweet');
----- post_time was NULL.  Had to ALTER the datatype.  Deleted current rows also
mysql> ALTER TABLE tweets MODIFY COLUMN post_time DATETIME DEFAULT NOW();    <-- cOULD HAVE USED timestamp
mysql> DELETE FROM tweets WHERE user_name = 'cosmo';
mysql> DELETE FROM tweets WHERE user_name = 'mike';
mysql> INSERT INTO tweets (user_name, tweet)
       VALUES ('cosmo', 'a single tweet'), 
	   ('mike', 'double tweettweet');
mysql> SELECT * FROM tweets;
+-----------+-------------------+---------------------+
| user_name | tweet             | post_time           |
+-----------+-------------------+---------------------+
| cosmo     | a single tweet    | 2019-12-12 19:39:02 |
| mike      | double tweettweet | 2019-12-12 19:39:02 |
+-----------+-------------------+---------------------+

Using Logical Operators
Not Equal:
    SELECT title FROM books WHERE released_year = 2017;
     
    SELECT title FROM books WHERE released_year != 2017;
     
    SELECT title, author_lname FROM books;
     
    SELECT title, author_lname FROM books WHERE author_lname = 'Harris';
     
    SELECT title, author_lname FROM books WHERE author_lname != 'Harris';
	
NOT LIKE:
    SELECT title FROM books WHERE title LIKE 'W';
     
    SELECT title FROM books WHERE title LIKE 'W%';
     
    SELECT title FROM books WHERE title LIKE '%W%';
     
    SELECT title FROM books WHERE title LIKE 'W%';
     
    SELECT title FROM books WHERE title NOT LIKE 'W%';

Greater Than:
    SELECT title, released_year FROM books ORDER BY released_year;
     
    SELECT title, released_year FROM books 
    WHERE released_year > 2000 ORDER BY released_year;
     
    SELECT title, released_year FROM books 
    WHERE released_year >= 2000 ORDER BY released_year;
     
    SELECT title, stock_quantity FROM books;
     
    SELECT title, stock_quantity FROM books WHERE stock_quantity >= 100;
     
    SELECT 99 > 1;
     
    SELECT 99 > 567;
     
    100 > 5
    -- true
     
    -15 > 15
    -- false
     
    9 > -10
    -- true
     
    1 > 1
    -- false
     
    'a' > 'b'
    -- false
     
    'A' > 'a'
    -- false
     
    'A' >=  'a'
    -- true
     
    SELECT title, author_lname FROM books WHERE author_lname = 'Eggers';
     
    SELECT title, author_lname FROM books WHERE author_lname = 'eggers';
     
    SELECT title, author_lname FROM books WHERE author_lname = 'eGGers';

Less Than:
    SELECT title, released_year FROM books;
     
    SELECT title, released_year FROM books
    WHERE released_year < 2000;
     
    SELECT title, released_year FROM books
    WHERE released_year <= 2000;
     
    SELECT 3 < -10;
    -- false
     
    SELECT -10 < -9;
    -- true
     
    SELECT 42 <= 42;
    -- true
     
    SELECT 'h' < 'p';
    -- true
     
    SELECT 'Q' <= 'q';
    -- true
	
Logical AND
    SELECT title, author_lname, released_year FROM books
    WHERE author_lname='Eggers';
     
    SELECT title, author_lname, released_year FROM books
    WHERE released_year > 2010;
     
    SELECT  
        title, 
        author_lname, 
        released_year FROM books
    WHERE author_lname='Eggers' 
        AND released_year > 2010;
     
    SELECT 1 < 5 && 7 = 9;
    -- false
     
    SELECT -10 > -20 && 0 <= 0;
    -- true
     
    SELECT -40 <= 0 AND 10 > 40;
    --false
     
    SELECT 54 <= 54 && 'a' = 'A';
    -- true
     
    SELECT * 
    FROM books
    WHERE author_lname='Eggers' 
        AND released_year > 2010 
        AND title LIKE '%novel%';

Logical OR
    SELECT 
        title, 
        author_lname, 
        released_year 
    FROM books
    WHERE author_lname='Eggers' || released_year > 2010;
     
     
    SELECT 40 <= 100 || -2 > 0;
    -- true
     
    SELECT 10 > 5 || 5 = 5;
    -- true
     
    SELECT 'a' = 5 || 3000 > 2000;
    -- true
     
    SELECT title, 
           author_lname, 
           released_year, 
           stock_quantity 
    FROM   books 
    WHERE  author_lname = 'Eggers' 
                  || released_year > 2010 
    OR     stock_quantity > 100;
	
Between    
SELECT title, released_year FROM books WHERE released_year >= 2004 && released_year <= 2015;
     
    SELECT title, released_year FROM books 
    WHERE released_year BETWEEN 2004 AND 2015;
     
    SELECT title, released_year FROM books 
    WHERE released_year NOT BETWEEN 2004 AND 2015;
     
    SELECT CAST('2017-05-02' AS DATETIME);
     
    show databases;
     
    use new_testing_db;
     
    SELECT name, birthdt FROM people WHERE birthdt BETWEEN '1980-01-01' AND '2000-01-01';
     
    SELECT 
        name, 
        birthdt 
    FROM people
    WHERE 
        birthdt BETWEEN CAST('1980-01-01' AS DATETIME)
        AND CAST('2000-01-01' AS DATETIME);

In and Not In
    show databases();
    use book_shop;
     
    SELECT 
        title, 
        author_lname 
    FROM books
    WHERE author_lname='Carver' OR
          author_lname='Lahiri' OR
          author_lname='Smith';
     
    SELECT title, author_lname FROM books
    WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');
     
    SELECT title, released_year FROM books
    WHERE released_year IN (2017, 1985);
     
    SELECT title, released_year FROM books
    WHERE released_year != 2000 AND
          released_year != 2002 AND
          released_year != 2004 AND
          released_year != 2006 AND
          released_year != 2008 AND
          released_year != 2010 AND
          released_year != 2012 AND
          released_year != 2014 AND
          released_year != 2016;
     
    SELECT title, released_year FROM books
    WHERE released_year NOT IN 
    (2000,2002,2004,2006,2008,2010,2012,2014,2016);
     
    SELECT title, released_year FROM books
    WHERE released_year >= 2000
    AND released_year NOT IN 
    (2000,2002,2004,2006,2008,2010,2012,2014,2016);
     
    SELECT title, released_year FROM books
    WHERE released_year >= 2000 AND
    released_year % 2 != 0;
     
    SELECT title, released_year FROM books
    WHERE released_year >= 2000 AND
    released_year % 2 != 0 ORDER BY released_year;
	
Case Statements
    SELECT title, released_year,
           CASE 
             WHEN released_year >= 2000 THEN 'Modern Lit'
             ELSE '20th Century Lit'
           END AS GENRE
    FROM books;
     
    SELECT title, stock_quantity,
        CASE 
            WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
            WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
            ELSE '***'
        END AS STOCK
    FROM books;
     
    SELECT title,
        CASE 
            WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
            WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
            ELSE '***'
        END AS STOCK
    FROM books;
     
    SELECT title, stock_quantity,
        CASE 
            WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
            WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
            WHEN stock_quantity BETWEEN 101 AND 150 THEN '***'
            ELSE '****'
        END AS STOCK
    FROM books;
     
    SELECT title, stock_quantity,
        CASE 
            WHEN stock_quantity <= 50 THEN '*'
            WHEN stock_quantity <= 100 THEN '**'
            ELSE '***'
        END AS STOCK
    FROM books; 
	
Logical Operators Exercises

Evaluate the following...
SELECT 10 != 10;   <-- Returns FALSE
SELECT 15 > 14 && 99 - 5 <= 94;    <-- Returns TRUE
SELECT 1 IN (5,3) || 9 BETWEEN 8 AND 10;   <-- Returns TRUE

Select All Books Written Before 1980 (non inclusive)
mysql> SELECT title, released_year FROM books WHERE released_year < 1980;
+-------------+---------------+
| title       | released_year |
+-------------+---------------+
| Cannery Row |          1945 |
+-------------+---------------+

Select All Books Written By Eggers Or Chabon
mysql> SELECT title, author_fname, author_lname FROM books WHERE author_lname = 'eggers' || author_lname = 'chabon';
+-------------------------------------------+--------------+--------------+
| title                                     | author_fname | author_lname |
+-------------------------------------------+--------------+--------------+
| A Hologram for the King: A Novel          | Dave         | Eggers       |
| The Circle                                | Dave         | Eggers       |
| The Amazing Adventures of Kavalier & Clay | Michael      | Chabon       |
| A Heartbreaking Work of Staggering Genius | Dave         | Eggers       |
+-------------------------------------------+--------------+--------------+

Select All Books Written By Lahiri, Published after 2000
mysql> SELECT title, released_year,  author_fname, author_lname FROM books WHERE author_lname = 'lahiri' && released_year > 2000;
+--------------+---------------+--------------+--------------+
| title        | released_year | author_fname | author_lname |
+--------------+---------------+--------------+--------------+
| The Namesake |          2003 | Jhumpa       | Lahiri       |
+--------------+---------------+--------------+--------------+

Select All books with page counts between 100 and 200
mysql> SELECT title, stock_quantity FROM books WHERE stock_quantity BETWEEN 100 AND 200;
+-------------------------------------------+----------------+
| title                                     | stock_quantity |
+-------------------------------------------+----------------+
| A Hologram for the King: A Novel          |            154 |
| A Heartbreaking Work of Staggering Genius |            104 |
| Coraline                                  |            100 |
| Oblivion: Stories                         |            172 |
+-------------------------------------------+----------------+

Select all books where author_lname  starts with a 'C' or an 'S''
mysql> SELECT title, author_lname FROM books WHERE author_lname LIKE 'C%' || author_lname LIKE 'S%';
+-----------------------------------------------------+--------------+
| title                                               | author_lname |
+-----------------------------------------------------+--------------+
| The Amazing Adventures of Kavalier & Clay           | Chabon       |
| Just Kids                                           | Smith        |
| What We Talk About When We Talk About Love: Stories | Carver       |
| Where I'm Calling From: Selected Stories            | Carver       |
| Cannery Row                                         | Steinbeck    |
| Lincoln In The Bardo                                | Saunders     |
+-----------------------------------------------------+--------------+


If title contains 'stories'   -> Short Stories
Just Kids and A Heartbreaking Work  -> Memoir
Everything Else -> Novel

mysql> SELECT title,   
          CASE WHEN title LIKE '%stories%' THEN 'Short Stories' 
		       WHEN title LIKE '%Just Kids%' || title LIKE '%A Heartbreaking Work%' THEN 'Memoir'
			   ELSE 'Novel'   
		  END AS TYPE 
	   FROM books;


Bonus: Make This Happen
+-----------------------------------------------------+----------------+---------+
| title                                               | author_lname   | COUNT   |
+-----------------------------------------------------+----------------+---------+
| What We Talk About When We Talk About Love: Stories | Carver         | 2 books |
| The Amazing Adventures of Kavalier & Clay           | Chabon         | 1 book  |
| White Noise                                         | DeLillo        | 1 book  |
| A Hologram for the King: A Novel                    | Eggers         | 3 books |
| Oblivion: Stories                                   | Foster Wallace | 2 books |
| Norse Mythology                                     | Gaiman         | 3 books |
| 10% Happier                                         | Harris         | 1 book  |
| fake_book                                           | Harris         | 1 book  |
| The Namesake                                        | Lahiri         | 2 books |
| Lincoln In The Bardo                                | Saunders       | 1 book  |
| Just Kids                                           | Smith          | 1 book  |
| Cannery Row                                         | Steinbeck      | 1 book  |
+-----------------------------------------------------+----------------+---------+

mysql> SELECT title, author_lname, CONCAT(COUNT(title),' ', 'books') AS COUNT
    ->   FROM books GROUP BY author_lname, author_fname;
+-----------------------------------------------------+----------------+---------+
| title                                               | author_lname   | COUNT   |
+-----------------------------------------------------+----------------+---------+
| What We Talk About When We Talk About Love: Stories | Carver         | 2 books |
| The Amazing Adventures of Kavalier & Clay           | Chabon         | 1 books |
| White Noise                                         | DeLillo        | 1 books |
| A Hologram for the King: A Novel                    | Eggers         | 3 books |
| Oblivion: Stories                                   | Foster Wallace | 2 books |
| Norse Mythology                                     | Gaiman         | 3 books |
| 10% Happier                                         | Harris         | 1 books |
| fake_book                                           | Harris         | 1 books |
| The Namesake                                        | Lahiri         | 2 books |
| Lincoln In The Bardo                                | Saunders       | 1 books |
| Just Kids                                           | Smith          | 1 books |
| Cannery Row                                         | Steinbeck      | 1 books |
+-----------------------------------------------------+----------------+---------+
SELECT author_fname, author_lname,
    CASE 
        WHEN COUNT(*) = 1 THEN '1 book'
        ELSE CONCAT(COUNT(*), ' books')
    END AS COUNT
FROM books 
GROUP BY author_lname, author_fname;


-- Table Relationships
Relationships and JOINS

Relationships:
1. One to One
2. One to Many  <-- most common
3. Many to One

Customers and Orders
One customer will have many orders

Example data to Store:
- A sutomers first and last name
- A customers email
- Date of purchase
- Price of the order

We could use one table bur that introduces a lot of duplication or irrelevant data when someone hasn;t placed an order
first_name 	last_name 	email 	order_date 	amount
Boy  	George 	george@gmail.com 	'2016/02/10' 	99.99
Boy  	​George 	george@gmail.com 	'2017/11/11' 	35.50
George 	Michael 	gm@gmail.com 	'2014/12/12' 	800.67
George 	Michael 	gm@gmail.com 	'2015/01/03' 	12.50
David  	Bowie 	david@gmail.com 	NULL 	NULL
Blue 	Steele 	blue@gmail.com 	NULL 	NULL

Better - Have a customers and Orders table and relate Orders to customer ID
Customers

    customer_id
    first_name
    last_name
    email

Orders

    order_id
    order_date
    amount
    customer_id

See Customer ID still shows 2 ORDERS
CUSTOMERS
customer_id 	first_name 	last_name 	email
1 	Boy  	George 	george@gmail.com
2 	George 	Michael 	gm@gmail.com
3 	David  	Bowie 	david@gmail.com
4 	Blue 	Steele 	blue@gmail.com

ORDERS
order_id 	order_date 	amount 	customer_id
1 	'2016/02/10' 	99.99 	1
2 	'2017/11/11' 	35.50 	1
3 	'2014/12/12' 	800.67 	2
4 	'2015/01/03' 	12.50 	2

customer_id and order_id help keep elements separatly identifiable.

Foreign keys - Reference to a table outside of the current table.

Working with Foreign keys:

    CREATE TABLE customers(
        id INT AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        email VARCHAR(100)
    );
    CREATE TABLE orders(
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_date DATE,
        amount DECIMAL(8,2),
        customer_id INT,
        FOREIGN KEY(customer_id) REFERENCES customers(id)
    );

-- Inserting some customers and orders

    INSERT INTO customers (first_name, last_name, email) 
    VALUES ('Boy', 'George', 'george@gmail.com'),
           ('George', 'Michael', 'gm@gmail.com'),
           ('David', 'Bowie', 'david@gmail.com'),
           ('Blue', 'Steele', 'blue@gmail.com'),
           ('Bette', 'Davis', 'bette@aol.com');
           
    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/02/10', 99.99, 1),
           ('2017/11/11', 35.50, 1),
           ('2014/12/12', 800.67, 2),
           ('2015/01/03', 12.50, 2),
           ('1999/04/11', 450.25, 5);

       
-- This INSERT fails because of our fk constraint.  No user with id: 98


    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/06/06', 33.67, 98);
	
CODE: Cross Joins

-- Finding Orders Placed By George: 2 Step Process

    SELECT id FROM customers WHERE last_name='George';
    SELECT * FROM orders WHERE customer_id = 1;

-- Finding Orders Placed By George: Using a subquery

    SELECT * FROM orders WHERE customer_id =
        (
            SELECT id FROM customers
            WHERE last_name='George'
        );

-- Cross Join Craziness

SELECT * FROM customers, orders; 

CODE: Inner Joins

-- IMPLICIT INNER JOIN

    SELECT * FROM customers, orders 
    WHERE customers.id = orders.customer_id;

-- IMPLICIT INNER JOIN

    SELECT first_name, last_name, order_date, amount
    FROM customers, orders 
        WHERE customers.id = orders.customer_id;

    
-- EXPLICIT INNER JOINS

    SELECT * FROM customers
    JOIN orders
        ON customers.id = orders.customer_id;
        
    SELECT first_name, last_name, order_date, amount 
    FROM customers
    JOIN orders
        ON customers.id = orders.customer_id;
        
    SELECT *
    FROM orders
    JOIN customers
        ON customers.id = orders.customer_id;

-- ARBITRARY JOIN - meaningless, but still possible 

    SELECT * FROM customers
    JOIN orders ON customers.id = orders.id;
	
-- LEFT JOIN
-- Getting Fancier (Inner Joins Still)

    SELECT first_name, last_name, order_date, amount 
    FROM customers
    JOIN orders
        ON customers.id = orders.customer_id
    ORDER BY order_date;

    SELECT 
        first_name, 
        last_name, 
        SUM(amount) AS total_spent
    FROM customers
    JOIN orders
        ON customers.id = orders.customer_id
    GROUP BY orders.customer_id
    ORDER BY total_spent DESC;

-- LEFT JOIN

    SELECT * FROM customers
    LEFT JOIN orders
        ON customers.id = orders.customer_id;

    SELECT first_name, last_name, order_date, amount
    FROM customers
    LEFT JOIN orders
        ON customers.id = orders.customer_id; 

    SELECT 
        first_name, 
        last_name,
        IFNULL(SUM(amount), 0) AS total_spent
    FROM customers
    LEFT JOIN orders
        ON customers.id = orders.customer_id
    GROUP BY customers.id
    ORDER BY total_spent;

-- RIGHT JOIN
-- OUR FIRST RIGHT JOIN (seems the same as a left join?)

SELECT * FROM customers
RIGHT JOIN orders
    ON customers.id = orders.customer_id;

-- ALTERING OUR SCHEMA to allow for a better example (optional)

    CREATE TABLE customers(
        id INT AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        email VARCHAR(100)
    );
    CREATE TABLE orders(
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_date DATE,
        amount DECIMAL(8,2),
        customer_id INT
    );

-- INSERTING NEW DATA (no longer bound by foreign key constraint)

    INSERT INTO customers (first_name, last_name, email) 
    VALUES ('Boy', 'George', 'george@gmail.com'),
           ('George', 'Michael', 'gm@gmail.com'),
           ('David', 'Bowie', 'david@gmail.com'),
           ('Blue', 'Steele', 'blue@gmail.com'),
           ('Bette', 'Davis', 'bette@aol.com');
           
    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/02/10', 99.99, 1),
           ('2017/11/11', 35.50, 1),
           ('2014/12/12', 800.67, 2),
           ('2015/01/03', 12.50, 2),
           ('1999/04/11', 450.25, 5);
     
    INSERT INTO orders (order_date, amount, customer_id) VALUES
    ('2017/11/05', 23.45, 45),
    (CURDATE(), 777.77, 109);

--A MORE COMPLEX RIGHT JOIN


    SELECT 
        IFNULL(first_name,'MISSING') AS first, 
        IFNULL(last_name,'USER') as last, 
        order_date, 
        amount, 
        SUM(amount)
    FROM customers
    RIGHT JOIN orders
        ON customers.id = orders.customer_id
    GROUP BY first_name, last_name;

-- WORKING WITH ON DELETE CASCADE

    CREATE TABLE customers(
        id INT AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        email VARCHAR(100)
    );
     
    CREATE TABLE orders(
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_date DATE,
        amount DECIMAL(8,2),
        customer_id INT,
        FOREIGN KEY(customer_id) 
            REFERENCES customers(id)
            ON DELETE CASCADE
    );
     
     
    INSERT INTO customers (first_name, last_name, email) 
    VALUES ('Boy', 'George', 'george@gmail.com'),
           ('George', 'Michael', 'gm@gmail.com'),
           ('David', 'Bowie', 'david@gmail.com'),
           ('Blue', 'Steele', 'blue@gmail.com'),
           ('Bette', 'Davis', 'bette@aol.com');
           
    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/02/10', 99.99, 1),
           ('2017/11/11', 35.50, 1),
           ('2014/12/12', 800.67, 2),
           ('2015/01/03', 12.50, 2),
           ('1999/04/11', 450.25, 5);
		   
    SELECT * FROM customers
    LEFT JOIN orders
        ON customers.id = orders.customer_id;

    SELECT * FROM orders
    RIGHT JOIN customers
        ON customers.id = orders.customer_id;    

    SELECT * FROM orders
    LEFT JOIN customers
        ON customers.id = orders.customer_id;    

    SELECT * FROM customers
    RIGHT JOIN orders
        ON customers.id = orders.customer_id;
		
JOINS Exercise
Write this schema:
STUDENTS		PAPERS
- id			- title
- first_name	- grade
				- student_id (foreign key sudents.id)
				
mysql> CREATE TABLE students(
    -> id INT AUTO_INCREMENT PRIMARY KEY,
    -> first_name VARCHAR(20)
    -> );

mysql> CREATE TABLE papers( 
    -> title VARCHAR(50), 
	-> grade INT, student_id INT, 
	-> FOREIGN KEY(student_id) 
	->  REFERENCES students(id) 
	-> );
				
INSERT INTO students (first_name) VALUES 
('Caleb'), ('Samantha'), ('Raj'), ('Carlos'), ('Lisa');

INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

Print this:
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Samantha   | Russian Lit Through The Ages          |    94 |
| Carlos     | Borges and Magical Realism            |    89 |
| Caleb      | My Second Book Report                 |    75 |
| Caleb      | My First Book Report                  |    60 |
+------------+---------------------------------------+-------+
	      SELECT first_name, title, grade
    FROM students
    INNER JOIN papers
        ON students.id = papers.student_id
    ORDER BY grade DESC;
	
Print this:
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Caleb      | My First Book Report                  |    60 |
| Caleb      | My Second Book Report                 |    75 |
| Samantha   | Russian Lit Through The Ages          |    94 |
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Raj        | NULL                                  |  NULL |
| Carlos     | Borges and Magical Realism            |    89 |
| Lisa       | NULL                                  |  NULL |
+------------+---------------------------------------+-------+
      SELECT first_name, title, grade
    FROM students
    LEFT JOIN papers
        ON students.id = papers.student_id;
  
Print this
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Caleb      | My First Book Report                  | 60    |
| Caleb      | My Second Book Report                 | 75    |
| Samantha   | Russian Lit Through The Ages          | 94    |
| Samantha   | De Montaigne and The Art of The Essay | 98    |
| Raj        | MISSING                               | 0     |
| Carlos     | Borges and Magical Realism            | 89    |
| Lisa       | MISSING                               | 0     |
+------------+---------------------------------------+-------
      SELECT
        first_name,
        IFNULL(title, 'MISSING'),
        IFNULL(grade, 0)
    FROM students
    LEFT JOIN papers
        ON students.id = papers.student_id;
  
Print this
+------------+---------+
| first_name | average |
+------------+---------+
| Samantha   | 96.0000 |
| Carlos     | 89.0000 |
| Caleb      | 67.5000 |
| Raj        | 0       |
| Lisa       | 0       |
+------------+---------+
    SELECT
        first_name,
        IFNULL(AVG(grade), 0) AS average
    FROM students
    LEFT JOIN papers
        ON students.id = papers.student_id
    GROUP BY students.id
    ORDER BY average DESC;

Print this
+------------+---------+----------------+
| first_name | average | passing_status |
+------------+---------+----------------+
| Samantha   | 96.0000 | PASSING        |
| Carlos     | 89.0000 | PASSING        |
| Caleb      | 67.5000 | FAILING        |
| Raj        | 0       | FAILING        |
| Lisa       | 0       | FAILING        |
+------------+---------+----------------
SELECT 
  first_name,
  IFNULL(AVG(grade), 0) AS average,
  CASE WHEN AVG(grade) >= 75 THEN 'PASSING'
  ELSE 'FAILING'
  END AS passing_status
FROM students
LEFT JOIN papers
  ON students.id = papers.student_id
GROUP BY students.id
ORDER BY average DESC;
  
  
MANY:MANY Relationships
Create tables:
CREATE TABLE reviewers (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(20),
  last_name VARCHAR(20)
);

CREATE TABLE series (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(100),
  released_year YEAR(4),
  genre VARCHAR(50)
);

CREATE TABLE reviews (
  id INT AUTO_INCREMENT PRIMARY KEY,
  rating DECIMAL(2,1),
  series_id INT,
  reviewer_id INT,
  FOREIGN KEY(series_id) REFERENCES series(id),
  FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);


INSERT Series
INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
	
Insert reviewers
INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
	
Insert Reviews:
INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);

Now Let's Do Stuff:
TV JOINS challenge 1:
+----------------------+--------+
| title                | rating |
+----------------------+--------+
| Archer               |    8.0 |
| Archer               |    7.5 |
| Archer               |    8.5 |
| Archer               |    7.7 |
| Archer               |    8.9 |
| Arrested Development |    8.1 |
| Arrested Development |    6.0 |
| Arrested Development |    8.0 |
| Arrested Development |    8.4 |
| Arrested Development |    9.9 |
| Bob's Burgers        |    7.0 |
| Bob's Burgers        |    7.5 |
| Bob's Burgers        |    8.0 |
| Bob's Burgers        |    7.1 |
| Bob's Burgers        |    8.0 |
+----------------------+--------+
SELECT 
    title, 
	rating 
FROM series
JOIN reviews
    ON series.id = reviews.series_id;

TV JOINS challenge 2:
+----------------------+------------+
| title                | avg_rating |
+----------------------+------------+
| General Hospital     |    5.38000 |
| Bob's Burgers        |    7.52000 |
| Seinfeld             |    7.60000 |
| Bojack Horseman      |    7.94000 |
| Arrested Development |    8.08000 |
| Curb Your Enthusiasm |    8.12000 |
| Archer               |    8.12000 |
| Freaks and Geeks     |    8.60000 |
| Stranger Things      |    8.76667 |
| Breaking Bad         |    9.36000 |
| Fargo                |    9.40000 |
| Halt and Catch Fire  |    9.90000 |
+----------------------+------------+
SELECT
    title,
	AVG(rating) AS avg_rating
FROM series
JOIN reviews
    ON series.id = reviews.series_id
GROUP BY series.id
ORDER BY avg_rating;

TV JOINS challenge 3:
+------------+-----------+--------+
| first_name | last_name | rating |
+------------+-----------+--------+
| Thomas     | Stoneman  |    8.0 |
| Thomas     | Stoneman  |    8.1 |
| Thomas     | Stoneman  |    7.0 |
| Thomas     | Stoneman  |    7.5 |
| Thomas     | Stoneman  |    9.5 |
| Wyatt      | Skaggs    |    7.5 |
| Wyatt      | Skaggs    |    7.6 |
| Wyatt      | Skaggs    |    9.3 |
| Wyatt      | Skaggs    |    6.5 |
| Wyatt      | Skaggs    |    8.4 |
| Wyatt      | Skaggs    |    9.1 |
| Wyatt      | Skaggs    |    7.8 |
| Wyatt      | Skaggs    |    5.5 |
| Wyatt      | Skaggs    |    8.5 |
| Kimbra     | Masters   |    8.5 |
| Kimbra     | Masters   |    8.0 |
| Kimbra     | Masters   |    7.1 |
| Kimbra     | Masters   |    7.8 |
| Kimbra     | Masters   |    9.0 |
| Kimbra     | Masters   |    7.8 |
+------------+-----------+--------+
SELECT
    first_name,
	last_name,
	rating
FROM reviewers
INNER JOIN reviews 
    ON reviewers.id = reviews.reviewer_id;

TV JOINS challenge 4:
+-----------------------+
| unreviewed_series     |
+-----------------------+
| Malcolm In The Middle |
| Pushing Daisies       |
+-----------------------+
SELECT 
    title AS unreviewed_series
FROM series
LEFT JOIN reviews
    ON series.id = reviews.series_id
WHERE rating IS NULL;
	
TV JOINS challenge 5:
+-----------+------------+
| genre     | avg_rating |
+-----------+------------+
| Animation |    7.86000 |
| Comedy    |    8.16250 |
| Drama     |    8.04375 |
+-----------+------------+
SELECT
    genre,
	ROUND(
	AVG(rating),2)
	as avg_rating
FROM series
JOIN reviews
    ON series.id = reviews.series_id
GROUP BY series.genre;

TV JOINS challenge 6:
+------------+-----------+-------+-----+-----+---------+----------+
| first_name | last_name | COUNT | MIN | MAX | AVG     | STATUS   |
+------------+-----------+-------+-----+-----+---------+----------+
| Thomas     | Stoneman  |     5 | 7.0 | 9.5 | 8.02000 | ACTIVE   |
| Wyatt      | Skaggs    |     9 | 5.5 | 9.3 | 7.80000 | ACTIVE   |
| Kimbra     | Masters   |     9 | 6.8 | 9.0 | 7.98889 | ACTIVE   |
| Domingo    | Cortes    |    10 | 5.8 | 9.1 | 7.83000 | ACTIVE   |
| Colt       | Steele    |    10 | 4.5 | 9.9 | 8.77000 | ACTIVE   |
| Pinkie     | Petit     |     4 | 4.3 | 8.8 | 7.25000 | ACTIVE   |
| Marlon     | Crafford  |     0 | 0.0 | 0.0 | 0.00000 | INACTIVE |
+------------+-----------+-------+-----+-----+---------+----------+
SELECT
    first_name,
	last_name,
	COUNT(rating) AS COUNT,
	IFNULL(MIN(rating),0) AS MIN,
	IFNULL(MAX(rating),0) AS MAX,
	IFNULL(ROUND(AVG(rating),2),0) AS AVG,
CASE
    WHEN COUNT(rating) > 0 THEN 'ACTIVE'
	ELSE 'INACTIVE'
END AS STATUS
FROM reviewers
LEFT JOIN reviews
    ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;

Same with Power Users:
    SELECT first_name, 
           last_name, 
           Count(rating)                    AS COUNT, 
           Ifnull(Min(rating), 0)           AS MIN, 
           Ifnull(Max(rating), 0)           AS MAX, 
           Round(Ifnull(Avg(rating), 0), 2) AS AVG, 
           CASE 
             WHEN Count(rating) >= 10 THEN 'POWER USER' 
             WHEN Count(rating) > 0 THEN 'ACTIVE' 
             ELSE 'INACTIVE' 
           end                              AS STATUS 
    FROM   reviewers 
           LEFT JOIN reviews 
                  ON reviewers.id = reviews.reviewer_id 
    GROUP  BY reviewers.id; 

Alternative to CASE statement:
IF (COUNT(rating) >=1, 'ACTIVE', 'INACTIVE') AS STATUS

TV JOINS challenge 7:
+----------------------+--------+-----------------+
| title                | rating | reviewer        |
+----------------------+--------+-----------------+
| Archer               |    8.0 | Thomas Stoneman |
| Archer               |    7.7 | Domingo Cortes  |
| Archer               |    8.5 | Kimbra Masters  |
| Archer               |    7.5 | Wyatt Skaggs    |
| Archer               |    8.9 | Colt Steele     |
| Arrested Development |    8.4 | Pinkie Petit    |
| Arrested Development |    9.9 | Colt Steele     |
| Arrested Development |    8.1 | Thomas Stoneman |
| Arrested Development |    6.0 | Domingo Cortes  |
| Arrested Development |    8.0 | Kimbra Masters  |
| Bob's Burgers        |    7.0 | Thomas Stoneman |
| Bob's Burgers        |    8.0 | Domingo Cortes  |
| Bob's Burgers        |    7.1 | Kimbra Masters  |
| Bob's Burgers        |    7.5 | Pinkie Petit    |
| Bob's Burgers        |    8.0 | Colt Steele     |
+----------------------+--------+-----------------+
SELECT
    title,
	rating,
	CONCAT(first_name,' ',last_name) AS reviewer
FROM series
JOIN reviews
    ON series.id = reviews.series_id
JOIN reviewers
    ON reviewers.id = reviews.reviewer_id
ORDER BY title;

				
Intro to Instagram clone schema:
 
  Users
  Photos
  Comments
  Likes
  Hashtags
  Followers/Following

My try at a schema:
users
  id INT AUTO_INCREMENT PRIMARY KEY
  login_id VARCHAR(24)
  first_name VARCHAR(24)
  last_name VARCHAR(24)
  
photos
  id INT AUTO_INCREMENT PRIMARY KEY
  file_name VARCHAR(100)
  user_id FOREIGN KEY users.id
  
comments
  id INT AUTO_INCREMENT PRIMARY KEY
  comments VARCHAR(180)
  photo_id FOREIGN KEY photos.id
  user_id FOREIGN KEY users.id
  
likes
  id INT AUTO_INCREMENT PRIMARY KEY
  like_state BINARY CHOICE
  photo_id FOREIGN KEY photos.id
  user_id FOREIGN KEY users.id

hashtags
  id INT AUTO_INCREMENT PRIMARY KEY
  hash_tag VARCHAR(100)
  photo_id FOREIGN KEY photos.id
  
followers
  id INT AUTO_INCREMENT PRIMARY KEY
  followed BINARY CHOICE
  following BINARY CHOICE
  user_id FOREIGN KEY users.id

Colt's schema:
CREATE DATABASE ig_clone;
USE ig_clone;

Users
  CREATE TABLE users (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
	username VARCHAR(255) UNIQUE,
	created_at TIMESTAMP DEFAULT NOW()
)


Photos
  CREATE TABLE photos (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
	image_url VARCHAR(255) NOT NULL,
	user_id INTEGER NOT NULL,
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY(user_id) REFERENCES users(id)
);

Comments
  CREATE TABLE comments (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
	comment_text VARCHAR(180) NOT NULL,
	user_id INTEGER NOT NULL,
	photo_id INTEGER NOT NULL,
	created_at TIMESTAMP DEFAULT NOW()
	FOREIGN KEY(user_id) REFERENCES users(id),
	FOREIGN KEY(photo_id) REFERENCES photos(id)
  );

Likes
  CREATE TABLE likes (
    user_id INTEGER NOT NULL,
	photo_id INTEGER NOT NULL,	
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY (user_id) REFERENCES users(id),
	FOREIGN KEY (photo_id) REFERENCES photos(id),
	PRIMARY KEY(user_id, photo_id)
);

Followers/Following
  CREATE TABLE follows (
    follower_id INTEGER NOT NULL,
	followee_id INTEGER NOT NULL,
	created_at TIMESTAMP DEFAULT NOW(),
	FOREIGN KEY (follower_id) REFERENCES users(id),
	FOREIGN KEY (followee_id) REFERENCES users(id)
  );
  
Hashtags
  Need 2 tables Tags and Photo_tags

CREATE table tags (
  id INT AUTO_INCREMENT PRIMARY KEY,
  tag_name VARCHAR(255) UNIQUE,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE table photo_tags (
  photo_id INTEGER NOT NULL,
  tag_id INT NOT NULL,
  FOREIGN KEY (photo_id) REFERENCES photos(id),
  FOREIGN KEY (tag_id) REFERENCES tags(id),
  PRIMARY KEY (tag_id,photo_id)
  );

 Copy the ig-clone-data.sql to the goorm ide and execute to create the schema and populate thousands of data
 
 - We want to reward our users who have been around the longest.
     Find the 5 oldest users:
	SELECT *
    FROM users
    ORDER BY created_at
    LIMIT 5;
	
 - We need to figure out a good day for an ad campaign
     What day of the week do most users register?
	SELECT DAYNAME(created_at) AS day, COUNT(created_at) AS count
    FROM users
    GROUP BY day
    ORDER BY count DESC
	LIMIT 2;
	  
 - We want to target our inactive users with an email campaign.
     Find the users who have never posted a photo.
	SELECT username, photos.user_id FROM users
    LEFT JOIN photos
      ON users.id = photos.user_id
    WHERE photos.id IS NULL;
	
 - We're running a new contest to see who can get the most likes on a single photo
     Who won?
     SELECT username, photos.id, photos.image_url,COUNT(*) AS Likes_Count FROM photos
     INNER JOIN likes
      ON photos.id = likes.photo_id
	 INNER JOIN users
	  ON photos.user_id = users.id
     GROUP BY photos.id
     ORDER BY Likes_Count DESC
     LIMIT 5;
	 
 - Our investors want to know...
     How many times does the average user post? hint: SUBQUESRIES
	 SELECT
(SELECT COUNT(*) FROM photos) / (SELECT COUNT(*) FROM users) as AVG;

 - A brand wants to know which hashtags to use in a post
     What are the top 5 most commonly used hashtags
#	 SELECT COUNT(tag_id), tag_name FROM photo_tags
#JOIN tags
#  ON photo_tags.tag_id = tags.id
#  GROUP BY tag_id
#ORDER BY tag_id DESC
#LIMIT 5;
	 SELECT tags.tag_name, 
       Count(*) AS total 
FROM   photo_tags 
       JOIN tags 
         ON photo_tags.tag_id = tags.id 
GROUP  BY tags.id 
ORDER  BY total DESC 
LIMIT  5;
	 
 - We have a small problem with bots on our site
     Find users who have liked every single photo on the site
   SELECT username,
	   COUNT(*) AS num_likes
FROM users
INNER JOIN likes
  ON users.id = likes.user_id
  GROUP BY likes.user_id
  HAVING num_likes = (SELECT COUNT(*) FROM photos);
  

--Introducing NODE
5 Minute Node crash course
  # node -v
  v10.16.3
  //Print "HELLO WORLD" 500 times using Node

    for(var i = 0; i < 500; i++){
      console.log("HELLO WORLD!");
    }

// Execute file with:

node filename.js 

if you'd like to prevent the warning messages from occurring then you can simply create your app.js 
file in the project folder then run the command npm init -y which will create a corresponding package.
json file.

Introducing Faker (faker.js)- Streamlines the process of generating fake data
npm install faker
CODE: Introduction to NPM and Faker

Find Faker Docs Here: https://github.com/marak/Faker.js/
STEP 1: Install and Require Faker

// Install Faker via command line:

npm install faker 

// Require it inside of a JS file:

var faker = require('faker'); 
STEP 2: Use Faker!

// Print a random email

console.log(faker.internet.email()); 

// Print a random past date

console.log(faker.date.past()); 

// Print a random city

console.log(faker.address.city()); 

// We can define a new function

    function generateAddress(){
      console.log(faker.address.streetAddress());
      console.log(faker.address.city());
      console.log(faker.address.state());
    }

// And then execute that function:

generateAddress(); 

Introducing the MySQL package mysql.js

Connecting NODE to MySQL
CODE: Connecting Node to MySQL

Documentation for the MySQL Node Package: 
Step 1: Install the MySQL Node Package

npm install mysql 


Step 2: Connect to Database*

    var mysql = require('mysql');
     
    var connection = mysql.createConnection({
      host     : 'localhost',
      user     : 'root',     // your root username
      database : 'join_us'   // the name of your db
    });


Step 3: Run Queries

Running a super simple SQL query like:

SELECT 1 + 1; 

Using the MySQL Node Package:

    connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
       if (error) throw error;
       console.log('The solution is: ', results[0].solution);
    });
    connection.end();

Another sample query, this time selecting 3 things:

    var q = 'SELECT CURTIME() as time, CURDATE() as date, NOW() as now';
    connection.query(q, function (error, results, fields) {
      if (error) throw error;
      console.log(results[0].time);
      console.log(results[0].date);
      console.log(results[0].now);
    });

The equivalent SQL query:

    SELECT CURTIME() as time, CURDATE() as date, NOW() as now;



*Note:

We don't recommend using AWS, but if you are using the AWS version of Cloud9 then you'll need to
include a password for the user, see example below:

    var mysql = require('mysql');
     
    var connection = mysql.createConnection({
      host     : 'localhost',
      user     : 'root',  // your root username (leave as root)
      database : 'join_us',   // the name of your db (create this if you haven't already)
      password : process.env.MYSQL_PW   // your root user's password
    });

In order for this to work you'll first need to export the root password in an environment variable.
Run the following command from your bash terminal:

export MYSQL_PW='your-password-here' 

If you want the password to persist as an environment variable then checkout the dotenv npm 
package, otherwise you will need to export the variable every time you open a new terminal window.


- Creating our users database 
     CREATE TABLE users (
        email VARCHAR(255) PRIMARY KEY,
        created_at TIMESTAMP DEFAULT NOW()
    );
	
- SELECT using NODE:
CODE: Selecting Using Node

Insert users (from command line):

    INSERT INTO users (email) VALUES('Katie34@yahoo.com'), ('Tunde@gmail.com');

Check that users are added:

    SELECT * FROM users;

To SELECT all users from database:

    var q = 'SELECT * FROM users ';
    connection.query(q, function (error, results, fields) {
      if (error) throw error;
      console.log(results);
    });

To count the number of users in the database:

    var q = 'SELECT COUNT(*) AS total FROM users ';
    connection.query(q, function (error, results, fields) {
      if (error) throw error;
      console.log(results[0].total);
    });


- Inserting Using Node
Approach #1
    var q = 'INSERT INTO users (email) VALUES ("rusty_the_dog@gmail.com")';
     
    connection.query(q, function (error, results, fields) {
      if (error) throw error;
      console.log(results);
    });
	
Approach #2
    var q = 'INSERT INTO users (email) VALUES ("rusty_the_dog@gmail.com")';
     
    connection.query(q, function (error, results, fields) {
      if (error) throw error;
      console.log(results);
    });
	
Insert 500 fakes:
    var mysql = require('mysql');
    var faker = require('faker');
     
     
    var connection = mysql.createConnection({
      host     : 'localhost',
      user     : 'learnwithcolt',
      database : 'join_us'
    });
     
     
    var data = [];
    for(var i = 0; i < 500; i++){
        data.push([
            faker.internet.email(),
            faker.date.past()
        ]);
    }
     
     
    var q = 'INSERT INTO users (email, created_at) VALUES ?';
     
    connection.query(q, [data], function(err, result) {
      console.log(err);
      console.log(result);
    });
     
    connection.end();
	
	
	
Bulk faker insert:
root@goorm:/workspace/mysql2# cat bulk_faker_insert.js
    var mysql = require('mysql');
    var faker = require('faker');


    var connection = mysql.createConnection({
      host     : 'localhost',
      user     : 'root',
      database : 'join_us'
    });


    var data = [];
    for(var i = 0; i < 500; i++){
        data.push([
            faker.internet.email(),
            faker.date.past()
        ]);
    }


    var q = 'INSERT INTO users (email, created_at) VALUES ?';

    connection.query(q, [data], function(err, result) {
      console.log(err);
      console.log(result);
    });	
	
		
Excercises:
Find the earliest Date someone joined
    SELECT 
        DATE_FORMAT(MIN(created_at), "%M %D %Y") as earliest_date 
    FROM users;

Find the email of the earliest user
SELECT * 
FROM   users 
WHERE  created_at = (SELECT Min(created_at) 
                     FROM   users);

Table of users according to the month they joined
    SELECT Monthname(created_at) AS month, 
           Count(*)              AS count 
    FROM   users 
    GROUP  BY month 
    ORDER  BY count DESC; 

Count the number of users with yahoo emails
    SELECT Count(*) AS yahoo_users 
    FROM   users 
    WHERE  email LIKE '%@yahoo.com'; 

Calculate the total number of users for each email host
    SELECT CASE 
             WHEN email LIKE '%@gmail.com' THEN 'gmail' 
             WHEN email LIKE '%@yahoo.com' THEN 'yahoo' 
             WHEN email LIKE '%@hotmail.com' THEN 'hotmail' 
             ELSE 'other' 
           end      AS provider, 
           Count(*) AS total_users 
    FROM   users 
    GROUP  BY provider 
    ORDER  BY total_users DESC; 
	
	
-- Building the web site
Introducing Express
  Lightweight framework for building code
  expressjs.com
  
npm init creates a package.json file to store all the packages and versions you need for a project
root@goorm:/workspace/mysql2/JoinUs# npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (joinus) join_us
version: (1.0.0)
description:
entry point: (index.js) app.js
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to /workspace/mysql2/JoinUs/package.json:

{
  "name": "join_us",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes)


Now install express.  It adds it to the package.json as dependencies under the license line and creates a node_modules directory
# npm install express --save

Install faker and mysql packages to have it locally in the current directory
# npm install faker mysql --save

#npm install will use the nearest package.json

Our first simple web app -  app.js
   app.get is a single route. IN this case the root or home ("/") page

    var express = require('express');
     
    var app = express();
     
    app.get("/", function(req, res){
     res.send("HELLO FROM OUR WEB APP!");
    });
     
    app.listen(8080, function () {
     console.log('App listening on port 8080!');
    });

# node app.js


Adding more routes
  Add a "/joke" route
      app.get("/joke", function(req, res){
     var joke = "What do you call a dog that does magic tricks? A labracadabrador.";
     res.send(joke);
    });
  
  
  Add random number generator route
      app.get("/random_num", function(req, res){
     var num = Math.floor((Math.random() * 10) + 1);
     res.send("Your lucky number is " + num);
    });



-- Next Logical Step - Integrating MySQL
Take the simple home page to "We have 5xx users" quantity adjusted by mysql
Client ("Give me the "/" page") > Express App(Node) ("I need to get the user count" > MySQL (SELECT COUNT(*) from users;)
> Express App(Node)(MySQL says there are 5xx users) > Client (We have 5xx users)

    app.get("/", function(req, res){
     var q = 'SELECT COUNT(*) as count FROM users';
     connection.query(q, function (error, results) {
     if (error) throw error;
     var msg = "We have " + results[0].count + " users";
     res.send(msg);
     });
    });
	
	
	
-- Adding EJS Templates (Embedded Java Script)
npm --save install ejs
Add app.set("view engine", "ejs"); to the app-wide settings section



    <h1>JOIN US</h1>
     
    <p class="lead">Enter your email to join <strong><%= count %></strong> 
    others on our waitlist. We are 100% not a cult. </p>
     
    <form>
     <input type="text" class="form" placeholder="Enter Your Email">
     <button>Join Now</button>
    </form>
	
-- Connecting the form
npm install --save body-parser
Add in var body-parser =require("body-parser")'
Add in app.use(bodyParser.urlencoded({extended: true}));

Need to add method and route to home <form method="POST" action="/register">
Also add a label (name) to the input type: name="email"

Final form tag:
<form method="POST" action="/register">
     <input type="text" name="email" class="form" placeholder="Enter Your Email">
     <button>Join Now</button>
    </form>

Then add the route to app.js:

    app.post('/register', function(req,res){
     var person = {email: req.body.email};
     connection.query('INSERT INTO users SET ?', person, function(err, result) {
     console.log(err);
     console.log(result);
     res.redirect("/");
     });
    });

-- HTML and CSS files zip

gzipped up the final site

Database Triggers
More efficent to use the to control when to manipulate the database than use the database queries
Syntax:
CREATE TRIGGER trigger_name
  trigger_time trigger_event ON table_name FOR EACH ROW
  BEGIN
  ...
  END;
  
trigger_time	trigger_event	ON	table_name
BEFORE			INSERT				photos
AFTER			UPDATE				users
				DELETE


First Trigger:

mysql> CREATE TABLE users (
    ->   username VARCHAR(100),
    ->   age INT
    -> );
	
mysql> INSERT INTO users (username, age) VALUES ("bobby", 23);
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM users
    -> ;
+----------+------+
| username | age  |
+----------+------+
| bobby    |   23 |
+----------+------+
1 row in set (0.01 sec)


Create users_trigger.sql:
DELIMITER $$

CREATE TRIGGER must_be_adult
     BEFORE INSERT ON people FOR EACH ROW
     BEGIN
          IF NEW.age < 18
          THEN
              SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Must be an adult!';
          END IF;
     END;
$$

DELIMITER ;

# source users_trigger.sql

Try inserting a user older than 18.
Try inserting a user younger than 18.

Preventing Instagram self-follows:
DELIMITER $$

CREATE TRIGGER example_cannot_follow_self
     BEFORE INSERT ON follows FOR EACH ROW
     BEGIN
          IF NEW.follower_id = NEW.following_id
          THEN
               SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'Cannot follow yourself, silly';
          END IF;
     END;
$$

DELIMITER ;

Creating logger triggers:
Logging unfollows:
DELIMITER $$

CREATE TRIGGER create_unfollow
    AFTER DELETE ON follows FOR EACH ROW 
BEGIN
    INSERT INTO unfollows
    SET follower_id = OLD.follower_id,
        followee_id = OLD.followee_id;
END$$

DELIMITER ;

Managing triggers and a warning on triggers:
- "SHOW triggers;" to see a list of triggers
- "DROP TRIGGER triger_name;" removes a trigger

Warning:  Triggers can make debugging hard




	
	
